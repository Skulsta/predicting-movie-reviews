from pathlib import Path
from collections import Counter
from itertools import dropwhile
import re
import pickle
import math

def get_stop_words():
    stop_words = []
    filepath = Path('aclImdb/stopwords.txt').read_text()
    return re.split('\s+', filepath)


stop_words = get_stop_words()


def prepare_data(directory):
    data = []
    dirpath = Path(directory)
    assert(dirpath.is_dir())
    for x in dirpath.iterdir():
        if x.is_file() and re.search('^\d+?_([1-9]|10)\.txt$', x.name):
            data.append(re.split('\s+', re.sub(r'[^\w\s]','',Path(x).read_text(errors='ignore')).lower()))
        elif x.is_dir():
            data.extend(prepare_data(x))
    return data

# Every review. Array of arrays. Punctuation removed. Everything is lower case.
pos_reviews = prepare_data('aclImdb/train/pos')
neg_reviews = prepare_data('aclImdb/train/neg')
all_reviews = pos_reviews + neg_reviews

# Logprior. Probability of an arbritrary review being positive or negative. Using log.
pos_logprior = len(pos_reviews) / len(all_reviews)
neg_logprior = len(neg_reviews) / len(all_reviews)

def remove_uncommon_words(counter):
    for key, count in dropwhile(lambda key_count: key_count[1] >= 10, counter.most_common()):
        del counter[key]
    return counter


def remove_stop_words(counter):
    for word in stop_words:
        del counter[word]
    return counter


def make_counter(array_of_arrays):
    counter = Counter()
    for review in array_of_arrays:
        counter.update(review)
    remove_uncommon_words(counter)
    remove_stop_words(counter)
    return counter

# Create Counters and remove uncommon words.
counter_all_reviews = make_counter(all_reviews)
counter_pos_reviews = make_counter(pos_reviews)
counter_neg_reviews = make_counter(neg_reviews)

def get_word_weight(counter):
    word_weights = dict()
    for word in all_reviews:
        word_weights[word] = counter.get(word, 0) + 1


pos_word_weights = get_word_weight(counter_pos_reviews)
neg_word_weights = get_word_weight(counter_neg_reviews)


def get_loglikelihood(counter):
    likelihood = dict()
    for word in all_reviews:
        likelihood[word] = math.log((counter.get(word, 0) + 1) / 
